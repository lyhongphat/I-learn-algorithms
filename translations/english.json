{
    "page_title": "I Learn Algorithms",
    "categories": "Algorithm Categories",
    "select_category": "Select a category:",
    
    "arrays_hashing": "Arrays & Hashing",
    "two_pointers": "Two Pointers",
    "two_pointers_desc": "The two pointers technique uses two references to traverse an array or sequence efficiently.\n\n**Key Concepts:**\n- Two pointers moving in the same or opposite directions\n- Usually works with sorted arrays\n- Reduces time complexity from O(nÂ²) to O(n)\n\n**Common Applications:**\n- Finding pairs in a sorted array (e.g., Two Sum)\n- Detecting cycles in linked lists\n- Palindrome verification\n- Container with most water problem\n- Remove duplicates from sorted array\n- Merge sorted arrays\n\n**Variations:**\n- Fast and slow pointers\n- Start and end pointers\n- Multiple pointers for 3Sum, 4Sum\n\n**Tips:**\n- Consider sorting the array first\n- Watch for edge cases (empty arrays, single elements)\n- Handle duplicates carefully",
    "stack": "Stack",
    "stack_desc": "A stack is a fundamental Last-In-First-Out (LIFO) data structure.\n\n**Key Operations:**\n- Push: Add element to top (O(1))\n- Pop: Remove element from top (O(1))\n- Peek/Top: View top element (O(1))\n- IsEmpty: Check if stack is empty (O(1))\n\n**Common Applications:**\n- Expression evaluation and syntax parsing\n- Undo/Redo operations\n- Browser history navigation\n- Function call management\n- DFS (Depth-First Search) implementation\n\n**Real-world Examples:**\n- Browser back button functionality\n- Text editor undo mechanism\n- Compiler syntax checking\n- Calculator operations\n\n**Implementation Tips:**\n- Use arrays or linked lists as underlying structure\n- Handle stack overflow and underflow\n- Consider memory limitations\n- Maintain stack size tracking",
    "binary_search": "Binary Search",
    "sliding_window": "Sliding Window",
    "linked_list": "Linked List",
    "trees": "Trees",
    "tries": "Tries",
    "heap": "Heap / Priority Queue",
    "backtracking": "Backtracking",
    "graphs": "Graphs",
    "advanced_graphs": "Advanced Graphs",
    "dp_1d": "1-D Dynamic Programming",
    "dp_2d": "2-D Dynamic Programming",
    "greedy": "Greedy",
    "intervals": "Intervals",
    "math_geometry": "Math & Geometry",
    "bit_manipulation": "Bit Manipulation",

    "arrays_hashing_desc": "Arrays and hashing are fundamental data structures and techniques in computer science.\n\n**Arrays:**\n- Collection of elements stored at contiguous memory locations\n- Constant-time access to elements using indices\n- Fixed size in most programming languages\n\n**Hashing:**\n- Technique to map data to fixed-size values\n- Used in hash tables for O(1) average case lookups\n- Common implementations: HashSet, HashMap/Dictionary",
    "binary_search_desc": "Binary search is a search algorithm that finds a target value in a sorted array.\n\n**Characteristics:**\n- O(log n) time complexity\n- Requires sorted input\n- Divides search interval in half\n\n**Applications:**\n- Finding elements in sorted arrays\n- Root finding\n- Optimization problems",
    "sliding_window_desc": "The sliding window technique is used to solve array/string problems efficiently.\n\n**Types:**\n- Fixed-size window\n- Variable-size window\n\n**Applications:**\n- Maximum sum subarray\n- Longest substring with k distinct characters\n- Finding anagrams in a string",
    "linked_list_desc": "A linked list is a linear data structure where elements are stored in nodes.\n\n**Types:**\n- Singly Linked List\n- Doubly Linked List\n- Circular Linked List\n\n**Common Operations:**\n- Insertion\n- Deletion\n- Traversal\n- Reversal",
    "trees_desc": "Trees are hierarchical data structures with a root node and child nodes.\n\n**Types:**\n- Binary Trees\n- Binary Search Trees (BST)\n- AVL Trees\n- Red-Black Trees\n\n**Common Operations:**\n- Insertion\n- Deletion\n- Traversal (In-order, Pre-order, Post-order)\n- Search",
    "tries_desc": "A trie is a tree-like data structure for storing strings, useful for prefix-based operations.\n\n**Characteristics:**\n- Each node represents a character\n- Paths from root represent strings\n- Efficient prefix operations\n\n**Applications:**\n- Autocomplete\n- Spell checkers\n- IP routing tables",
    "heap_desc": "A heap is a complete binary tree that satisfies the heap property.\n\n**Types:**\n- Min Heap\n- Max Heap\n\n**Applications:**\n- Priority scheduling\n- Dijkstra's algorithm\n- Median finding\n- Merge K sorted arrays",
    "backtracking_desc": "Backtracking is an algorithmic technique that solves problems recursively by trying different solutions.\n\n**Characteristics:**\n- Build solution incrementally\n- Remove solutions that fail to satisfy constraints\n\n**Classic Problems:**\n- N-Queens\n- Sudoku Solver\n- Combination Sum\n- Word Search",
    "graphs_desc": "Graphs represent relationships between objects using vertices and edges.\n\n**Representations:**\n- Adjacency Matrix\n- Adjacency List\n\n**Common Algorithms:**\n- BFS (Breadth-First Search)\n- DFS (Depth-First Search)\n- Shortest Path\n- Minimum Spanning Tree",
    "advanced_graphs_desc": "Advanced graph algorithms solve complex graph problems.\n\n**Algorithms:**\n- Dijkstra's Algorithm\n- Bellman-Ford Algorithm\n- Floyd-Warshall Algorithm\n- Kruskal's Algorithm\n- Prim's Algorithm\n\n**Applications:**\n- Network routing\n- Social networks\n- Game theory",
    "dp_1d_desc": "1-D Dynamic Programming solves problems by breaking them into simpler subproblems.\n\n**Characteristics:**\n- Optimal substructure\n- Overlapping subproblems\n\n**Classic Problems:**\n- Fibonacci sequence\n- Climbing stairs\n- House robber\n- Longest increasing subsequence",
    "dp_2d_desc": "2-D Dynamic Programming uses a two-dimensional array to store subproblem solutions.\n\n**Classic Problems:**\n- Longest Common Subsequence\n- Matrix Chain Multiplication\n- Edit Distance\n- Unique Paths",
    "greedy_desc": "Greedy algorithms make locally optimal choices at each step.\n\n**Characteristics:**\n- Make best immediate choice\n- May not lead to global optimal solution\n\n**Common Problems:**\n- Activity Selection\n- Huffman Coding\n- Fractional Knapsack\n- Minimum Coins",
    "intervals_desc": "Interval problems involve ranges or periods with start and end points.\n\n**Common Operations:**\n- Merging intervals\n- Finding overlaps\n- Scheduling\n\n**Applications:**\n- Meeting room scheduling\n- Task scheduling\n- Resource allocation",
    "math_geometry_desc": "Mathematical and geometric algorithms solve numerical and spatial problems.\n\n**Topics:**\n- Prime Numbers\n- GCD/LCM\n- Geometric Calculations\n- Vector Operations\n\n**Applications:**\n- Computational geometry\n- Computer graphics\n- Mathematical modeling",
    "bit_manipulation_desc": "Bit manipulation involves operations at the binary level.\n\n**Common Operations:**\n- AND, OR, XOR\n- Bit shifting\n- Setting/clearing bits\n\n**Applications:**\n- Optimization\n- Data compression\n- Error detection/correction"
}