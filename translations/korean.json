{
    "page_title": "알고리즘 학습",
    "categories": "알고리즘 카테고리",
    "select_category": "카테고리 선택:",
    
    "arrays_hashing": "배열과 해싱",
    "two_pointers": "투 포인터",
    "stack": "스택",
    "stack_desc": "스택은 후입선출(LIFO) 원칙을 따르는 기본적인 자료구조입니다.\n\n**주요 연산:**\n- 푸시: 스택의 상단에 요소 추가 (O(1))\n- 팝: 스택의 상단에서 요소 제거 (O(1))\n- 피크/탑: 상단 요소 확인 (O(1))\n- 비어있음 확인: 스택이 비어있는지 확인 (O(1))\n\n**일반적인 사용:**\n- 수식 평가 및 구문 분석\n- 실행 취소/다시 실행 작업\n- 브라우저 히스토리 탐색\n- 함수 호출 관리\n- 깊이 우선 탐색(DFS) 구현\n\n**실제 응용 사례:**\n- 브라우저 뒤로 가기 버튼\n- 편집기의 실행 취소 기능\n- 컴파일러의 구문 검사\n- 계산기 연산\n\n**구현 시 고려사항:**\n- 배열 또는 연결 리스트를 기본 구조로 사용\n- 스택 오버플로우와 언더플로우 처리\n- 메모리 제한 고려\n- 스택 크기 추적",
    "binary_search": "이진 탐색",
    "sliding_window": "슬라이딩 윈도우",
    "linked_list": "연결 리스트",
    "trees": "트리",
    "tries": "트라이",
    "heap": "힙/우선순위 큐",
    "backtracking": "백트래킹",
    "graphs": "그래프",
    "advanced_graphs": "고급 그래프",
    "dp_1d": "1차원 동적 프로그래밍",
    "dp_2d": "2차원 동적 프로그래밍",
    "greedy": "그리디",
    "intervals": "구간",
    "math_geometry": "수학과 기하학",
    "bit_manipulation": "비트 조작",

    "arrays_hashing_desc": "배열과 해싱은 컴퓨터 과학의 기본적인 자료구조와 기술입니다.\n\n**배열:**\n- 연속된 메모리 위치에 저장된 요소들의 집합\n- 인덱스를 사용한 상수 시간 접근\n- 대부분의 프로그래밍 언어에서 고정 크기\n\n**해싱:**\n- 데이터를 고정 크기 값으로 매핑하는 기술\n- O(1) 평균 케이스 조회를 위한 해시 테이블에서 사용\n- 일반적인 구현: HashSet, HashMap/Dictionary",
    "binary_search_desc": "이진 탐색은 정렬된 배열에서 대상 값을 찾는 검색 알고리즘입니다.\n\n**특징:**\n- O(log n) 시간 복잡도\n- 정렬된 입력 필요\n- 검색 구간을 반으로 분할\n\n**응용:**\n- 정렬된 배열에서 요소 찾기\n- 근사값 찾기\n- 최적화 문제",
    "sliding_window_desc": "슬라이딩 윈도우는 배열/문자열 문제를 효율적으로 해결하는 기법입니다.\n\n**유형:**\n- 고정 크기 윈도우\n- 가변 크기 윈도우\n\n**응용:**\n- 최대 부분 배열 합\n- k개의 서로 다른 문자를 가진 최장 부분 문자열\n- 문자열에서 애너그램 찾기",
    "linked_list_desc": "연결 리스트는 노드에 요소를 저장하는 선형 자료구조입니다.\n\n**유형:**\n- 단일 연결 리스트\n- 이중 연결 리스트\n- 원형 연결 리스트\n\n**기본 연산:**\n- 삽입\n- 삭제\n- 순회\n- 역순",
    "trees_desc": "트리는 루트 노드와 자식 노드를 가진 계층적 자료구조입니다.\n\n**유형:**\n- 이진 트리\n- 이진 검색 트리 (BST)\n- AVL 트리\n- 레드-블랙 트리\n\n**기본 연산:**\n- 삽입\n- 삭제\n- 순회 (중위, 전위, 후위)\n- 검색",
    "tries_desc": "트라이는 문자열을 저장하기 위한 트리 형태의 자료구조로, 접두사 기반 연산에 유용합니다.\n\n**특징:**\n- 각 노드가 문자를 표현\n- 루트에서의 경로가 문자열을 표현\n- 효율적인 접두사 연산\n\n**응용:**\n- 자동 완성\n- 맞춤법 검사기\n- IP 라우팅 테이블",
    "heap_desc": "힙은 힙 속성을 만족하는 완전 이진 트리입니다.\n\n**유형:**\n- 최소 힙\n- 최대 힙\n\n**응용:**\n- 우선순위 스케줄링\n- 다익스트라 알고리즘\n- 중앙값 찾기\n- K개의 정렬된 배열 병합",
    "backtracking_desc": "백트래킹은 다양한 해결책을 재귀적으로 시도하는 알고리즘 기법입니다.\n\n**특징:**\n- 단계적으로 해결책 구축\n- 제약 조건을 만족하지 않는 해결책 제거\n\n**대표적인 문제:**\n- N-퀸\n- 스도쿠 풀이\n- 조합 합\n- 단어 찾기",
    "graphs_desc": "그래프는 정점과 간선을 사용하여 객체 간의 관계를 표현합니다.\n\n**표현 방법:**\n- 인접 행렬\n- 인접 리스트\n\n**기본 알고리즘:**\n- BFS (너비 우선 탐색)\n- DFS (깊이 우선 탐색)\n- 최단 경로\n- 최소 신장 트리",
    "advanced_graphs_desc": "고급 그래프 알고리즘은 복잡한 그래프 문제를 해결합니다.\n\n**알고리즘:**\n- 다익스트라 알고리즘\n- 벨만-포드 알고리즘\n- 플로이드-워셜 알고리즘\n- 크루스칼 알고리즘\n- 프림 알고리즘\n\n**응용:**\n- 네트워크 라우팅\n- 소셜 네트워크\n- 게임 이론",
    "dp_1d_desc": "1차원 동적 프로그래밍은 문제를 더 작은 부분 문제로 나누어 해결합니다.\n\n**특징:**\n- 최적 부분 구조\n- 중복되는 부분 문제\n\n**대표적인 문제:**\n- 피보나치 수열\n- 계단 오르기\n- 집 도둑\n- 최장 증가 부분 수열",
    "dp_2d_desc": "2차원 동적 프로그래밍은 2차원 배열을 사용하여 부분 문제의 해를 저장합니다.\n\n**대표적인 문제:**\n- 최장 공통 부분 수열\n- 행렬 체인 곱셈\n- 편집 거리\n- 유일한 경로",
    "greedy_desc": "그리디 알고리즘은 각 단계에서 지역적으로 최적인 선택을 합니다.\n\n**특징:**\n- 현재 상태에서 최선의 선택\n- 전체적인 최적해를 보장하지 않음\n\n**대표적인 문제:**\n- 활동 선택\n- 허프만 코딩\n- 분할 가능 배낭 문제\n- 최소 동전",
    "intervals_desc": "구간 문제는 시작점과 끝점을 가진 범위나 기간을 다룹니다.\n\n**기본 연산:**\n- 구간 병합\n- 겹침 찾기\n- 스케줄링\n\n**응용:**\n- 회의실 예약\n- 작업 스케줄링\n- 자원 할당",
    "math_geometry_desc": "수학과 기하학 알고리즘은 수치적 및 공간적 문제를 해결합니다.\n\n**주제:**\n- 소수\n- GCD/LCM\n- 기하학적 계산\n- 벡터 연산\n\n**응용:**\n- 계산 기하학\n- 컴퓨터 그래픽스\n- 수학적 모델링",
    "bit_manipulation_desc": "비트 조작은 비트 수준의 연산을 다룹니다.\n\n**기본 연산:**\n- AND, OR, XOR\n- 비트 시프트\n- 비트 설정/제거\n\n**응용:**\n- 최적화\n- 데이터 압축\n- 오류 검출/수정"
}